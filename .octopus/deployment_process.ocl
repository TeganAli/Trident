step "calculate-deployment-mode" {
    name = "Calculate Deployment Mode"

    action {
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-81"
            Octopus.Action.Template.Version = "5"
        }
        worker_pool_variable = ""
    }
}

step "run-runbook-to-configure-sql-server" {
    condition = "Variable"
    name = "Run Runbook to configure SQL Server"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-41"
            Octopus.Action.Template.Version = "14"
            Run.Runbook.Api.Key = "#{Project.Runbook.Api.Key}"
            Run.Runbook.AutoApproveManualInterventions = "No"
            Run.Runbook.Base.Url = "#{Octopus.Web.ServerUri}"
            Run.Runbook.CancelInSeconds = "1800"
            Run.Runbook.DateTime = "N/A"
            Run.Runbook.Environment.Name = "#{Octopus.Environment.Name}"
            Run.Runbook.Machines = "N/A"
            Run.Runbook.ManualIntervention.EnvironmentToUse = "#{Octopus.Environment.Name}"
            Run.Runbook.Name = "Create Trident Database"
            Run.Runbook.Project.Name = "Trident"
            Run.Runbook.Space.Name = "#{Octopus.Space.Name}"
            Run.Runbook.Tenant.Name = "#{Octopus.Deployment.Tenant.Name}"
            Run.Runbook.UsePublishedSnapShot = "True"
            Run.Runbook.Waitforfinish = "True"
        }
        worker_pool = "default-worker-pool-1"
    }
}

step "generate-database-delta-report" {
    condition = "Variable"
    name = "Generate Database Delta Report"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                $environmentName = $OctopusParameters["Octopus.Environment.Name"]
                $reportPath = $OctopusParameters["Project.Database.Report.Path"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                $generatedReport = "$reportPath\UpgradeReport.html"
                
                & $appToRun --ConnectionString="$connectionString" --PreviewReportPath="$reportPath"
                
                New-OctopusArtifact -Path "$generatedReport" -Name "$environmentName.UpgradeReport.html"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool-1"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "auto-approve-database-delta-script" {
    condition = "Variable"
    name = "Auto-Approve Database Delta Script"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        environments = ["staging", "staging-green", "staging-blue"]
        properties = {
            Databases.AutoApproval.ReportPath = "#{Project.Database.Report.Path}\\UpgradeReport.html"
            Databases.AutoApprove.CommandsIndicatingChange = "#{SQL.Verification.Change.List}"
            Databases.AutoApprove.CommandsRequireApproval = "#{SQL.Verification.Command.List}"
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-61"
            Octopus.Action.Template.Version = "0"
        }
        tenant_tags = ["Branch Type/Pseudo"]
        worker_pool = "default-worker-pool-1"
    }
}

step "dba-review-changes" {
    condition = "Variable"
    name = "DBA Review Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{Octopus.Action[Auto Approve SQL Delta Report].Output.ApprovalRequired}"
    }

    action {
        action_type = "Octopus.Manual"
        environments = ["staging"]
        properties = {
            Octopus.Action.Manual.BlockConcurrentDeployments = "False"
            Octopus.Action.Manual.Instructions = "Please approve the database delta script found in the artifacts section."
            Octopus.Action.Manual.ResponsibleTeamIds = "dbas,global/octopus-managers"
        }
        tenant_tags = ["Branch Type/Pseudo"]
    }
}

step "deploy-database-changes" {
    condition = "Variable"
    name = "Deploy Database Changes"
    properties = {
        Octopus.Step.ConditionVariableExpression = "#{unless Octopus.Deployment.Error}#{Octopus.Action[Calculate Deployment Mode].Output.RunOnDeploy}#{/unless}"
    }

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $packagePath = $OctopusParameters["Octopus.Action.Package[Trident.Database].ExtractedPath"]
                $connectionString = $OctopusParameters["Project.Connection.String"]
                
                cd $packagePath
                $appToRun = ".\Octopus.Trident.Database.DbUp"
                
                & $appToRun --ConnectionString="$connectionString"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool-1"

        packages "Trident.Database" {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Database"
            properties = {
                Extract = "True"
                Purpose = ""
                SelectionMode = "immediate"
            }
        }
    }
}

step "deploy-trident-web" {
    name = "Deploy Trident.Web"
    properties = {
        Octopus.Action.MaxParallelism = "2"
        Octopus.Action.TargetRoles = "trident-web"
    }

    action {
        action_type = "Octopus.TentaclePackage"
        properties = {
            Octopus.Action.EnabledFeatures = "Octopus.Features.JsonConfigurationVariables"
            Octopus.Action.Package.DownloadOnTentacle = "False"
            Octopus.Action.Package.FeedId = "octopus-server-built-in"
            Octopus.Action.Package.JsonConfigurationVariablesTargets = "appSettings.json"
            Octopus.Action.Package.PackageId = "Trident.Web"
        }
        worker_pool_variable = ""

        packages {
            acquisition_location = "Server"
            feed = "octopus-server-built-in"
            package_id = "Trident.Web"
            properties = {
                SelectionMode = "immediate"
            }
        }
    }
}

step "verify-application-post-deployment" {
    name = "Verify Application Post Deployment"

    action {
        action_type = "Octopus.Script"
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $randomNumber = Get-Random -Minimum 1 -Maximum 100
                
                Write-Host "The random number is $randomNumber.  If it is above 99, this will fail the step."
                if ($randomNumber -ge 99)
                {
                	Write-Host "An error occurred verifying the application."
                    exit 1
                }
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool-1"
    }
}

step "disable-maintenance-mode" {
    name = "Update Load Balancer to Blue or Green"

    action "add-to-load-balancer" {
        action_type = "Octopus.Script"
        channels = ["release", "hotfix"]
        notes = <<-EOT
                **Always runs**
                Run a script that will direct traffic to the new version of the code.
                **Please note** If the deployment fails, this step will not run and the application will continue to be in maintenance mode.
                EOT
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Script.ScriptBody = <<-EOT
                $currentEnvironment = $OctopusParameters["Octopus.Environment.Name"]
                Write-Highlight "Updating load balancer to point to $currentEnvironment"
                EOT
            Octopus.Action.Script.ScriptSource = "Inline"
            Octopus.Action.Script.Syntax = "PowerShell"
        }
        worker_pool = "default-worker-pool-1"
    }
}

step "trident-email-notification" {
    condition = "Always"
    name = "Trident email notification"

    action {
        action_type = "Octopus.Email"
        properties = {
            Octopus.Action.Email.Body = "#{Notification.Body.Text}"
            Octopus.Action.Email.Subject = "#{Notification.Subject.Text}"
            Octopus.Action.Email.ToTeamIds = "trident-notifications"
        }
    }
}

step "send-slack-message-on-failure" {
    condition = "Failure"
    name = "Send Slack message on failure"

    action {
        properties = {
            Octopus.Action.RunOnServer = "true"
            Octopus.Action.Template.Id = "ActionTemplates-1"
            Octopus.Action.Template.Version = "15"
            ssn_Channel = "trident-deployment-notifications"
            ssn_Color = "danger"
            ssn_HookUrl = "#{Notification.Slack.Webhook.Url}"
            ssn_IconUrl = "https://octopus.com/content/resources/favicon.png"
            ssn_Message = "#{Notification.Body.Text}"
            ssn_Title = "#{Notification.Subject.Text}"
            ssn_Username = "Trident Project in Octopus Deploy"
        }
        worker_pool = "default-worker-pool-1"
    }
}